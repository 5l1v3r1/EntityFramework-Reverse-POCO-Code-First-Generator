// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.co.uk/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Registered to: Simon Hughes
// Company      : Reverse POCO
// Licence Type : Commercial
// Licences     : 1
// Valid until  : 03 NOV 2020
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Connection String Name: "Ef6Database"
//     Connection String:      "Data Source=(local);Initial Catalog=EfrpgTest;Integrated Security=True;Application Name=EntityFramework Reverse POCO Generator"
// ------------------------------------------------------------------------------------------------
// Database Edition       : Developer Edition (64-bit)
// Database Engine Edition: Enterprise
// Database Version       : 14.0.2027.2

// <auto-generated>
// ReSharper disable CheckNamespace
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable NotAccessedVariable
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantCast
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// ReSharper disable UsePatternMatching
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data;
using System.Data.Common;
using System.Data.Entity;
using System.Data.Entity.Core.Objects;
using System.Data.Entity.Infrastructure;
using System.Data.Entity.Infrastructure.Annotations;
using System.Data.Entity.Infrastructure.Interception;
using System.Data.Entity.Spatial;
using System.Data.Entity.Validation;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace Tester.Single_context_many_files
{
    public class Ef6DbContext : DbContext, IEf6DbContext
    {
        public DbSet<ColumnName> ColumnNames { get; set; } // ColumnNames
        public DbSet<Stafford_Boo> Stafford_Boos { get; set; } // Boo
        public DbSet<Stafford_ComputedColumn> Stafford_ComputedColumns { get; set; } // ComputedColumns
        public DbSet<Stafford_Foo> Stafford_Foos { get; set; } // Foo
        public DbSet<Synonyms_Child> Synonyms_Children { get; set; } // Child
        public DbSet<Synonyms_Parent> Synonyms_Parents { get; set; } // Parent
        public DbSet<UserInfo> UserInfoes { get; set; } // UserInfo
        public DbSet<UserInfoAttribute> UserInfoAttributes { get; set; } // UserInfoAttributes

        static Ef6DbContext()
        {
            System.Data.Entity.Database.SetInitializer<Ef6DbContext>(null);
        }

        /// <inheritdoc />
        public Ef6DbContext()
            : base("Name=Ef6Database")
        {
        }

        /// <inheritdoc />
        public Ef6DbContext(string connectionString)
            : base(connectionString)
        {
        }

        /// <inheritdoc />
        public Ef6DbContext(string connectionString, DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        /// <inheritdoc />
        public Ef6DbContext(DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        /// <inheritdoc />
        public Ef6DbContext(DbConnection existingConnection, DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        /// <inheritdoc />
        public Ef6DbContext(ObjectContext objectContext, bool dbContextOwnsObjectContext)
            : base(objectContext, dbContextOwnsObjectContext)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Conventions.Add(new CodeFirstStoreFunctions.FunctionsConvention<Ef6DbContext>("dbo"));

            modelBuilder.ComplexType<CsvToIntReturnModel>();

            modelBuilder.Configurations.Add(new ColumnNameConfiguration());
            modelBuilder.Configurations.Add(new Stafford_BooConfiguration());
            modelBuilder.Configurations.Add(new Stafford_ComputedColumnConfiguration());
            modelBuilder.Configurations.Add(new Stafford_FooConfiguration());
            modelBuilder.Configurations.Add(new Synonyms_ChildConfiguration());
            modelBuilder.Configurations.Add(new Synonyms_ParentConfiguration());
            modelBuilder.Configurations.Add(new UserInfoConfiguration());
            modelBuilder.Configurations.Add(new UserInfoAttributeConfiguration());

            // Indexes        
            modelBuilder.Entity<ColumnName>()
                .Property(e => e.C36)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("PK_ColumnNames", 1) { IsUnique = true, IsClustered = true })
                );


            modelBuilder.Entity<Stafford_Boo>()
                .Property(e => e.Id)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("PK_Boo", 1) { IsUnique = true, IsClustered = true })
                );


            modelBuilder.Entity<Stafford_ComputedColumn>()
                .Property(e => e.Id)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("PK_Stafford_ComputedColumns", 1) { IsUnique = true, IsClustered = true })
                );


            modelBuilder.Entity<Stafford_Foo>()
                .Property(e => e.Id)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("PK_Foo", 1) { IsUnique = true, IsClustered = true })
                );


            modelBuilder.Entity<Synonyms_Child>()
                .Property(e => e.ChildId)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("PK_Child", 1) { IsUnique = true, IsClustered = true })
                );


            modelBuilder.Entity<Synonyms_Parent>()
                .Property(e => e.ParentId)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("PK_Parent", 1) { IsUnique = true, IsClustered = true })
                );


            modelBuilder.Entity<UserInfo>()
                .Property(e => e.Id)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("PK_UserInfo", 1) { IsUnique = true, IsClustered = true })
                );


            modelBuilder.Entity<UserInfoAttribute>()
                .Property(e => e.Id)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("PK_UserInfoAttributes", 1) { IsUnique = true, IsClustered = true })
                );

        }

        public static DbModelBuilder CreateModel(DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new ColumnNameConfiguration(schema));
            modelBuilder.Configurations.Add(new Stafford_BooConfiguration(schema));
            modelBuilder.Configurations.Add(new Stafford_ComputedColumnConfiguration(schema));
            modelBuilder.Configurations.Add(new Stafford_FooConfiguration(schema));
            modelBuilder.Configurations.Add(new Synonyms_ChildConfiguration(schema));
            modelBuilder.Configurations.Add(new Synonyms_ParentConfiguration(schema));
            modelBuilder.Configurations.Add(new UserInfoConfiguration(schema));
            modelBuilder.Configurations.Add(new UserInfoAttributeConfiguration(schema));

            return modelBuilder;
        }

        // Stored Procedures
        public List<Synonyms_SimpleStoredProcReturnModel> Synonyms_SimpleStoredProc(int? inputInt)
        {
            int procResult;
            return Synonyms_SimpleStoredProc(inputInt, out procResult);
        }

        public List<Synonyms_SimpleStoredProcReturnModel> Synonyms_SimpleStoredProc(int? inputInt, out int procResult)
        {
            var inputIntParam = new SqlParameter { ParameterName = "@InputInt", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = inputInt.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!inputInt.HasValue)
                inputIntParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            var procResultData = Database.SqlQuery<Synonyms_SimpleStoredProcReturnModel>("EXEC @procResult = [Synonyms].[SimpleStoredProc] @InputInt", inputIntParam, procResultParam).ToList();
            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<Synonyms_SimpleStoredProcReturnModel>> Synonyms_SimpleStoredProcAsync(int? inputInt)
        {
            var inputIntParam = new SqlParameter { ParameterName = "@InputInt", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = inputInt.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!inputInt.HasValue)
                inputIntParam.Value = DBNull.Value;

            var procResultData = await Database.SqlQuery<Synonyms_SimpleStoredProcReturnModel>("EXEC [Synonyms].[SimpleStoredProc] @InputInt", inputIntParam).ToListAsync();
            return procResultData;
        }


        // Table Valued Functions

        [DbFunction("Ef6DbContext", "CsvToInt")]
        [CodeFirstStoreFunctions.DbFunctionDetails(DatabaseSchema = "dbo", ResultColumnName = "IntValue")]
        public IQueryable<CsvToIntReturnModel> CsvToInt(string array, string array2)
        {
            var arrayParam = new ObjectParameter("array", typeof(string)) { Value = (object)array };
            var array2Param = new ObjectParameter("array2", typeof(string)) { Value = (object)array2 };

            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<CsvToIntReturnModel>("[Ef6DbContext].[CsvToInt](@array, @array2)", arrayParam, array2Param);
        }

        // Scalar Valued Functions

        [DbFunction("CodeFirstDatabaseSchema", "udfNetSale")]
        public decimal UdfNetSale(int? quantity, decimal? listPrice, decimal? discount)
        {
            throw new Exception("Don't call this directly. Use LINQ to call the scalar valued function as part of your query");
        }
    }
}
// </auto-generated>


