// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Registered to: Simon Hughes
// Company      : Reverse POCO
// Licence Type : Commercial
// Licences     : 1
// Valid until  : 03 NOV 2020
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Connection String Name: "Ef6Database"
//     Connection String:      "Data Source=(local);Initial Catalog=EfrpgTest;Integrated Security=True;Application Name=EntityFramework Reverse POCO Generator"
// ------------------------------------------------------------------------------------------------
// Database Edition       : Developer Edition (64-bit)
// Database Engine Edition: Enterprise
// Database Version       : 14.0.2027.2

// <auto-generated>
// ReSharper disable CheckNamespace
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable NotAccessedVariable
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantCast
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// ReSharper disable UsePatternMatching
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity.ModelConfiguration;

namespace Tester.Single_context_many_files
{
    // ColumnNames
    public class ColumnNameConfiguration : EntityTypeConfiguration<ColumnName>
    {
        public ColumnNameConfiguration()
            : this("dbo")
        {
        }

        public ColumnNameConfiguration(string schema)
        {
            ToTable("ColumnNames", schema);
            HasKey(x => x.C36);

            Property(x => x.C36).HasColumnName(@"$").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.C37).HasColumnName(@"%").HasColumnType("int").IsOptional();
            Property(x => x.C163).HasColumnName(@"Â£").HasColumnType("int").IsOptional();
            Property(x => x.C38Test36).HasColumnName(@"&test$").HasColumnType("int").IsOptional();
            Property(x => x.Abc4792).HasColumnName(@"abc/\").HasColumnType("int").IsOptional();
            Property(x => x.Joe46Bloggs).HasColumnName(@"joe.bloggs").HasColumnType("int").IsOptional();
            Property(x => x.SnakeCase).HasColumnName(@"snake-case").HasColumnType("int").IsOptional();
            Property(x => x.DefaultTest).HasColumnName(@"default_test").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(20);
            Property(x => x.SomeDate).HasColumnName(@"someDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Obs).HasColumnName(@"Obs").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(20);
            Property(x => x.Slash1).HasColumnName(@"Slash1").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(20);
            Property(x => x.Slash2).HasColumnName(@"Slash2").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(20);
            Property(x => x.Slash3).HasColumnName(@"Slash3").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(20);
            Property(x => x.@Static).HasColumnName(@"static").HasColumnType("int").IsOptional();
            Property(x => x.@Readonly).HasColumnName(@"readonly").HasColumnType("int").IsOptional();
            Property(x => x.C123Hi).HasColumnName(@"123Hi").HasColumnType("int").IsOptional();
            Property(x => x.Afloat).HasColumnName(@"afloat").HasColumnType("real").IsOptional();
            Property(x => x.Adouble).HasColumnName(@"adouble").HasColumnType("float").IsOptional();
            Property(x => x.Adecimal).HasColumnName(@"adecimal").HasColumnType("decimal").IsOptional().HasPrecision(19,4);
        }
    }

}
// </auto-generated>


