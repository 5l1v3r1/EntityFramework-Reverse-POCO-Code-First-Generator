// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Registered to: Simon Hughes
// Company      : Reverse POCO
// Licence Type : Commercial
// Licences     : 1
// Valid until  : 03 NOV 2020
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Connection String Name: "McsfMultiDatabase"
//     Connection String:      "Data Source=(local);Initial Catalog=EfrpgTest;Integrated Security=True"
//     Multi-context settings: "Data Source=(local);Initial Catalog=EfrpgTest_Settings;Integrated Security=True"
// ------------------------------------------------------------------------------------------------
// Database Edition       : Developer Edition (64-bit)
// Database Engine Edition: Enterprise
// Database Version       : 14.0.2027.2

// <auto-generated>
// ReSharper disable CheckNamespace
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable NotAccessedVariable
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantCast
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// ReSharper disable UsePatternMatching
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data;
using System.Data.Common;
using System.Data.Entity;
using System.Data.Entity.Core.Objects;
using System.Data.Entity.Infrastructure;
using System.Data.Entity.Infrastructure.Annotations;
using System.Data.Entity.Infrastructure.Interception;
using System.Data.Entity.ModelConfiguration;
using System.Data.Entity.Spatial;
using System.Data.Entity.Validation;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace Tester.Multi_context_single_filesPlum
{
    #region Database context interface

    public interface IDamsonDbContext : IDisposable
    {
        DbSet<NoPrimaryKey> NoPrimaryKeys { get; set; } // NoPrimaryKeys
        DbSet<Synonyms_Parent> Synonyms_Parents { get; set; } // Parent

        int SaveChanges();
        Task<int> SaveChangesAsync();
        Task<int> SaveChangesAsync(CancellationToken cancellationToken);
        DbChangeTracker ChangeTracker { get; }
        DbContextConfiguration Configuration { get; }
        Database Database { get; }
        DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        DbEntityEntry Entry(object entity);
        IEnumerable<DbEntityValidationResult> GetValidationErrors();
        DbSet Set(Type entityType);
        DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();
    }

    #endregion

    #region Database context

    public class DamsonDbContext : DbContext, IDamsonDbContext
    {
        public DbSet<NoPrimaryKey> NoPrimaryKeys { get; set; } // NoPrimaryKeys
        public DbSet<Synonyms_Parent> Synonyms_Parents { get; set; } // Parent

        static DamsonDbContext()
        {
            System.Data.Entity.Database.SetInitializer<DamsonDbContext>(null);
        }

        /// <inheritdoc />
        public DamsonDbContext()
            : base("Name=McsfMultiDatabase")
        {
        }

        /// <inheritdoc />
        public DamsonDbContext(string connectionString)
            : base(connectionString)
        {
        }

        /// <inheritdoc />
        public DamsonDbContext(string connectionString, DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        /// <inheritdoc />
        public DamsonDbContext(DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        /// <inheritdoc />
        public DamsonDbContext(DbConnection existingConnection, DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        /// <inheritdoc />
        public DamsonDbContext(ObjectContext objectContext, bool dbContextOwnsObjectContext)
            : base(objectContext, dbContextOwnsObjectContext)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new NoPrimaryKeyConfiguration());
            modelBuilder.Configurations.Add(new Synonyms_ParentConfiguration());

            // Indexes        
            modelBuilder.Entity<Synonyms_Parent>()
                .Property(e => e.ParentId)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("PK_Parent", 1) { IsUnique = true, IsClustered = true })
                );

        }

        public static DbModelBuilder CreateModel(DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new NoPrimaryKeyConfiguration(schema));
            modelBuilder.Configurations.Add(new Synonyms_ParentConfiguration(schema));

            return modelBuilder;
        }
    }

    #endregion

    #region Database context factory

    public class DamsonDbContextFactory : IDbContextFactory<DamsonDbContext>
    {
        public DamsonDbContext Create()
        {
            return new DamsonDbContext();
        }
    }

    #endregion

    #region POCO classes

    // NoPrimaryKeys
    public class NoPrimaryKey
    {
        public string Description { get; set; } // Description (Primary key) (length: 10)

        // Reverse navigation

        /// <summary>
        /// Child Synonyms_Parents where [Parent].[ParentName] point to this entity (CustomNameForForeignKey)
        /// </summary>
        public virtual ICollection<Synonyms_Parent> ChildFkName { get; set; } // Parent.CustomNameForForeignKey

        public NoPrimaryKey()
        {
            ChildFkName = new List<Synonyms_Parent>();
        }
    }

    // Parent
    public class Synonyms_Parent
    {
        public int ParentId { get; set; } // ParentId (Primary key)
        public string ParentName { get; set; } // ParentName (length: 100)

        // Foreign keys

        /// <summary>
        /// Parent NoPrimaryKey pointed by [Parent].([ParentName]) (CustomNameForForeignKey)
        /// </summary>
        public virtual NoPrimaryKey ParentFkName { get; set; } // CustomNameForForeignKey
    }


    #endregion

    #region POCO Configuration

    // NoPrimaryKeys
    public class NoPrimaryKeyConfiguration : EntityTypeConfiguration<NoPrimaryKey>
    {
        public NoPrimaryKeyConfiguration()
            : this("dbo")
        {
        }

        public NoPrimaryKeyConfiguration(string schema)
        {
            ToTable("NoPrimaryKeys", schema);
            HasKey(x => x.Description);

            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(10).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
        }
    }

    // Parent
    public class Synonyms_ParentConfiguration : EntityTypeConfiguration<Synonyms_Parent>
    {
        public Synonyms_ParentConfiguration()
            : this("Synonyms")
        {
        }

        public Synonyms_ParentConfiguration(string schema)
        {
            ToTable("Parent", schema);
            HasKey(x => x.ParentId);

            Property(x => x.ParentId).HasColumnName(@"ParentId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.ParentName).HasColumnName(@"ParentName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(100);

            // Foreign keys
            HasRequired(a => a.ParentFkName).WithMany(b => b.ChildFkName).HasForeignKey(c => c.ParentName).WillCascadeOnDelete(false); // CustomNameForForeignKey
        }
    }


    #endregion

}
// </auto-generated>


